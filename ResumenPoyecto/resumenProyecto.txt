Clase Slot:

Comenzar con la clase Slot puede ser beneficioso, ya que es una parte fundamental de la asignación
 de vuelos en el aeropuerto. Desarrollar esta clase te permitirá establecer cómo representar los 
 slots de tiempo en el aeropuerto y cómo interactuar con ellos.

Clase Lector y sus subclases (LectorCSV, LectorJSON, LectorTXT):

Una vez que tengas una idea clara de cómo representar los datos de los vuelos en los slots, 
puedes pasar al desarrollo del módulo de lectura de archivos. Comienza con la clase base Lector, 
definiendo cómo leer archivos genéricos y luego desarrolla las subclases para leer archivos 
específicos en formatos como CSV, JSON y TXT.

Clase Aeropuerto:

Después de haber establecido cómo representar los slots de tiempo y cómo leer los datos de los 
vuelos desde archivos, puedes desarrollar la clase Aeropuerto. Esta clase integrará la funcionalidad 
de asignación de vuelos a slots y la gestión general de los vuelos en el aeropuerto. 

¿Que tiene que tener cada clase? 

Clase Aeropuerto:
init: El constructor inicializa el aeropuerto con un DataFrame de vuelos, el número de slots 
disponibles, y los tiempos de embarque (nacional e internacional). También inicializa un diccionario
 de slots vacío y configura algunas columnas en el DataFrame de vuelos.
calcula_fecha_despegue: Este método debe implementarse para calcular la fecha de despegue de un vuelo 
en función de la disponibilidad de slots y otros factores.
encuentra_slot: Debe implementarse para encontrar un slot disponible para un vuelo en particular.
asigna_slot: Asigna un slot a un vuelo en particular.
asigna_slots: Debe implementarse para asignar slots a todos los vuelos del DataFrame.

Clase Lector:
init: Inicializa la clase con una ruta de archivo.
_comprueba_extension: Verifica la extensión del archivo para asegurarse de que sea compatible.
lee_archivo: Método genérico para leer el archivo.
convierte_dict_a_csv: Método estático para convertir un diccionario a un archivo CSV.

Clases LectorCSV, LectorJSON, LectorTXT (heredadas de Lector)*:
init: Constructor específico para cada tipo de archivo.
lee_archivo: Implementación específica de lectura de cada tipo de archivo.

Clase Slot:
init: Inicializa un slot con un identificador y fechas inicial y final.
asigna_vuelo: Puede implementarse para asignar un vuelo a este slot.
slot_esta_libre_fecha_determinada: Verifica si el slot está libre en una fecha específica.

Función preprocess_data:
Esta función podría implementarse para realizar cualquier procesamiento previo necesario en los
 datos antes de utilizarlos, como limpieza de datos, conversión de formatos, etc. 